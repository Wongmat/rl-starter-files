/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Device: cpu

Environments loaded

Training status loaded

Observations preprocessor loaded
Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Device: cpu

/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Device: cpu

/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Device: cpu

/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Device: cpu

/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Device: cpu

/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Device: cpu

Environments loaded

Training status loaded

Observations preprocessor loaded
Environments loaded

Training status loaded

Observations preprocessor loaded
/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Device: cpu

/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Device: cpu

Device: cpu

/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Device: cpu

/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Environments loaded

Training status loaded

Observations preprocessor loaded
Device: cpu

/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Device: cpu

Device: cpu

Environments loaded

Training status loaded

Observations preprocessor loaded
/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Device: cpu

Device: cpu

Environments loaded

Training status loaded

Observations preprocessor loaded
Environments loaded

Training status loaded

Observations preprocessor loaded
Environments loaded

Training status loaded

Observations preprocessor loaded
Environments loaded

Training status loaded

Observations preprocessor loaded
Environments loaded

Training status loaded

Observations preprocessor loaded
Environments loaded

Training status loaded

Observations preprocessor loaded
Environments loaded

Training status loaded

Observations preprocessor loaded
Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

Model loaded

Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

Model loaded

Model loaded

Environments loaded

Model loaded

Model loaded

Model loaded

Environments loaded

Environments loaded

Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

Training status loaded

Observations preprocessor loaded
ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

Training status loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

Observations preprocessor loaded
ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

Training status loaded

Observations preprocessor loaded
Environments loaded

Training status loaded

Observations preprocessor loaded
Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

/Users/Mat/Documents/OMSCS/CS7648 Robo/rl-original/scripts/train.py --algo ppo --env MiniGrid-DoorKey-5x5-v0 --model DoorKey-Text --save-interval 10 --frames 80000 --text

Namespace(algo='ppo', env='MiniGrid-DoorKey-5x5-v0', model='DoorKey-Text', seed=1, log_interval=1, save_interval=10, procs=16, frames=80000, epochs=4, batch_size=256, frames_per_proc=None, discount=0.99, lr=0.001, gae_lambda=0.95, entropy_coef=0.01, value_loss_coef=0.5, max_grad_norm=0.5, optim_eps=1e-08, optim_alpha=0.99, clip_eps=0.2, recurrence=1, text=True, mem=False)

Device: cpu

Environments loaded

Training status loaded

Observations preprocessor loaded
Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (word_embedding): Embedding(100, 32)
  (text_rnn): GRU(32, 128, batch_first=True)
  (actor): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=7, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=192, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

Optimizer loaded

U 1 | F 002048 | FPS 0741 | D 2 | rR:μσmM 0.00 0.00 0.00 0.00 | F:μσmM 0.0 0.0 0 0 | H 1.939 | V 0.109 | pL 0.018 | vL 0.002 | ∇ 0.126
U 2 | F 004096 | FPS 0907 | D 5 | rR:μσmM 0.01 0.03 0.00 0.14 | F:μσmM 249.4 2.4 240.0 250.0 | H 1.934 | V 0.062 | pL 0.021 | vL 0.000 | ∇ 0.019
U 3 | F 006144 | FPS 0871 | D 7 | rR:μσmM 0.01 0.03 0.00 0.14 | F:μσmM 249.4 2.4 240.0 250.0 | H 1.943 | V 0.051 | pL 0.010 | vL 0.000 | ∇ 0.006
U 4 | F 008192 | FPS 0842 | D 9 | rR:μσmM 0.05 0.13 0.00 0.40 | F:μσmM 239.9 26.8 167.0 250.0 | H 1.934 | V 0.045 | pL 0.008 | vL 0.001 | ∇ 0.012
U 5 | F 010240 | FPS 0881 | D 12 | rR:μσmM 0.05 0.13 0.00 0.40 | F:μσmM 239.9 26.8 167.0 250.0 | H 1.942 | V 0.037 | pL 0.007 | vL 0.000 | ∇ 0.005
U 6 | F 012288 | FPS 0877 | D 14 | rR:μσmM 0.05 0.12 0.00 0.45 | F:μσmM 239.9 24.9 154.0 250.0 | H 1.939 | V 0.035 | pL 0.004 | vL 0.001 | ∇ 0.015
U 7 | F 014336 | FPS 0865 | D 16 | rR:μσmM 0.05 0.12 0.00 0.41 | F:μσmM 240.6 22.5 165.0 250.0 | H 1.942 | V 0.025 | pL 0.001 | vL 0.001 | ∇ 0.017
U 8 | F 016384 | FPS 0859 | D 19 | rR:μσmM 0.04 0.12 0.00 0.41 | F:μσmM 241.5 23.3 165.0 250.0 | H 1.934 | V 0.025 | pL 0.005 | vL 0.000 | ∇ 0.009
U 9 | F 018432 | FPS 0801 | D 21 | rR:μσmM 0.07 0.16 0.00 0.46 | F:μσmM 234.9 32.8 150.0 250.0 | H 1.935 | V 0.027 | pL -0.004 | vL 0.001 | ∇ 0.020
U 10 | F 020480 | FPS 0857 | D 24 | rR:μσmM 0.08 0.17 0.00 0.46 | F:μσmM 233.0 35.5 150.0 250.0 | H 1.935 | V 0.020 | pL 0.003 | vL 0.001 | ∇ 0.021
Status saved
U 11 | F 022528 | FPS 0784 | D 26 | rR:μσmM 0.05 0.14 0.00 0.53 | F:μσmM 240.4 29.7 130.0 250.0 | H 1.923 | V 0.023 | pL -0.003 | vL 0.001 | ∇ 0.023
U 12 | F 024576 | FPS 0860 | D 29 | rR:μσmM 0.08 0.16 0.00 0.53 | F:μσmM 234.9 34.2 130.0 250.0 | H 1.923 | V 0.033 | pL 0.004 | vL 0.001 | ∇ 0.016
U 13 | F 026624 | FPS 0724 | D 32 | rR:μσmM 0.09 0.17 0.00 0.49 | F:μσmM 232.8 36.4 141.0 250.0 | H 1.926 | V 0.036 | pL -0.002 | vL 0.001 | ∇ 0.030
U 14 | F 028672 | FPS 0658 | D 35 | rR:μσmM 0.10 0.17 0.00 0.49 | F:μσmM 230.8 36.0 141.0 250.0 | H 1.930 | V 0.041 | pL 0.006 | vL 0.000 | ∇ 0.009
U 15 | F 030720 | FPS 0653 | D 38 | rR:μσmM 0.04 0.13 0.00 0.51 | F:μσmM 241.4 27.8 136.0 250.0 | H 1.927 | V 0.040 | pL 0.005 | vL 0.001 | ∇ 0.028
U 16 | F 032768 | FPS 0775 | D 40 | rR:μσmM 0.17 0.25 0.00 0.84 | F:μσmM 213.9 58.3 44.0 250.0 | H 1.922 | V 0.037 | pL -0.011 | vL 0.003 | ∇ 0.038
U 17 | F 034816 | FPS 0703 | D 43 | rR:μσmM 0.20 0.29 0.00 0.84 | F:μσmM 207.6 69.0 44.0 250.0 | H 1.916 | V 0.034 | pL -0.007 | vL 0.003 | ∇ 0.034
U 18 | F 036864 | FPS 0521 | D 47 | rR:μσmM 0.24 0.34 0.00 0.85 | F:μσmM 194.0 82.2 43.0 250.0 | H 1.913 | V 0.049 | pL -0.022 | vL 0.006 | ∇ 0.070
U 19 | F 038912 | FPS 0769 | D 50 | rR:μσmM 0.26 0.27 0.00 0.76 | F:μσmM 193.9 64.6 66.0 250.0 | H 1.891 | V 0.068 | pL -0.010 | vL 0.004 | ∇ 0.043
U 20 | F 040960 | FPS 0643 | D 53 | rR:μσmM 0.44 0.30 0.00 0.89 | F:μσmM 151.4 76.1 31.0 250.0 | H 1.898 | V 0.079 | pL -0.026 | vL 0.007 | ∇ 0.073
Status saved
U 21 | F 043008 | FPS 0775 | D 56 | rR:μσmM 0.48 0.27 0.00 0.89 | F:μσmM 141.0 70.3 31.0 250.0 | H 1.848 | V 0.108 | pL -0.023 | vL 0.007 | ∇ 0.053
U 22 | F 045056 | FPS 0787 | D 58 | rR:μσmM 0.45 0.35 0.00 0.96 | F:μσmM 145.7 89.3 12.0 250.0 | H 1.802 | V 0.158 | pL -0.033 | vL 0.013 | ∇ 0.092
U 23 | F 047104 | FPS 0560 | D 62 | rR:μσmM 0.67 0.24 0.00 0.96 | F:μσmM 88.8 63.1 12.0 250.0 | H 1.729 | V 0.264 | pL -0.080 | vL 0.022 | ∇ 0.105
U 24 | F 049152 | FPS 0637 | D 65 | rR:μσmM 0.77 0.17 0.18 0.96 | F:μσmM 64.5 48.2 11.0 227.0 | H 1.730 | V 0.316 | pL -0.071 | vL 0.018 | ∇ 0.150
U 25 | F 051200 | FPS 0652 | D 68 | rR:μσmM 0.78 0.14 0.38 0.96 | F:μσmM 60.6 40.1 11.0 171.0 | H 1.649 | V 0.466 | pL -0.086 | vL 0.018 | ∇ 0.164
U 26 | F 053248 | FPS 0468 | D 73 | rR:μσmM 0.88 0.06 0.72 0.96 | F:μσmM 33.8 17.9 10.0 77.0 | H 1.518 | V 0.611 | pL -0.121 | vL 0.012 | ∇ 0.169
U 27 | F 055296 | FPS 0560 | D 77 | rR:μσmM 0.88 0.06 0.66 0.96 | F:μσmM 33.4 16.7 12.0 94.0 | H 1.511 | V 0.702 | pL -0.052 | vL 0.006 | ∇ 0.103
U 28 | F 057344 | FPS 0720 | D 79 | rR:μσmM 0.90 0.05 0.76 0.96 | F:μσmM 27.5 14.0 10.0 66.0 | H 1.416 | V 0.747 | pL -0.038 | vL 0.003 | ∇ 0.074
U 29 | F 059392 | FPS 0622 | D 83 | rR:μσmM 0.92 0.04 0.79 0.97 | F:μσmM 22.2 10.0 9.0 58.0 | H 1.321 | V 0.793 | pL -0.025 | vL 0.003 | ∇ 0.065
U 30 | F 061440 | FPS 0744 | D 85 | rR:μσmM 0.93 0.03 0.83 0.97 | F:μσmM 18.4 7.0 7.0 47.0 | H 1.260 | V 0.832 | pL -0.026 | vL 0.001 | ∇ 0.034
Status saved
U 31 | F 063488 | FPS 0620 | D 89 | rR:μσmM 0.93 0.03 0.74 0.97 | F:μσmM 19.1 9.1 8.0 71.0 | H 1.259 | V 0.831 | pL -0.004 | vL 0.002 | ∇ 0.036
U 32 | F 065536 | FPS 0785 | D 91 | rR:μσmM 0.94 0.03 0.81 0.97 | F:μσmM 17.6 7.1 9.0 54.0 | H 1.241 | V 0.845 | pL -0.010 | vL 0.001 | ∇ 0.033
U 33 | F 067584 | FPS 0853 | D 94 | rR:μσmM 0.93 0.03 0.84 0.97 | F:μσmM 19.1 7.0 7.0 44.0 | H 1.325 | V 0.838 | pL 0.001 | vL 0.001 | ∇ 0.027
U 34 | F 069632 | FPS 0863 | D 96 | rR:μσmM 0.93 0.02 0.86 0.97 | F:μσmM 19.2 6.5 9.0 39.0 | H 1.297 | V 0.837 | pL 0.003 | vL 0.001 | ∇ 0.030
U 35 | F 071680 | FPS 0775 | D 99 | rR:μσmM 0.93 0.03 0.79 0.97 | F:μσmM 19.8 8.9 9.0 57.0 | H 1.272 | V 0.835 | pL 0.005 | vL 0.001 | ∇ 0.032
U 36 | F 073728 | FPS 0676 | D 102 | rR:μσmM 0.93 0.03 0.82 0.97 | F:μσmM 20.1 8.4 8.0 50.0 | H 1.317 | V 0.831 | pL 0.008 | vL 0.001 | ∇ 0.036
U 37 | F 075776 | FPS 0833 | D 104 | rR:μσmM 0.93 0.02 0.85 0.97 | F:μσmM 19.1 6.1 9.0 42.0 | H 1.362 | V 0.835 | pL 0.007 | vL 0.001 | ∇ 0.031
U 38 | F 077824 | FPS 0841 | D 107 | rR:μσmM 0.92 0.03 0.84 0.97 | F:μσmM 21.4 7.9 9.0 44.0 | H 1.394 | V 0.810 | pL 0.016 | vL 0.002 | ∇ 0.050
U 39 | F 079872 | FPS 0814 | D 109 | rR:μσmM 0.91 0.10 0.00 0.97 | F:μσmM 24.8 25.1 8.0 250.0 | H 1.386 | V 0.808 | pL 0.005 | vL 0.003 | ∇ 0.039
U 40 | F 081920 | FPS 0807 | D 112 | rR:μσmM 0.92 0.03 0.78 0.97 | F:μσmM 21.5 9.3 7.0 62.0 | H 1.351 | V 0.810 | pL -0.011 | vL 0.002 | ∇ 0.039
Status saved
